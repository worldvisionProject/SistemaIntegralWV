@using WordVision.ec.Web.Views.Shared.Components.Footer;
@using WordVision.ec.Web.Views.Shared.Components.Title;
@using WordVision.ec.Web.Views.Shared.Components.Sidebar;
@using WordVision.ec.Web.Views.Shared.Components.Header;
@using WordVision.ec.Web.Views.Shared.Components.Logout;
@using WordVision.ec.Web.Views.Shared.Components.FormModal;
@using WordVision.ec.Web.Views.Shared.Components.ImageModal;

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title>World Vision</title>
    

    <partial name="_Styles" />
</head>
<body onload="pageLoad()"  class="hold-transition sidebar-mini">
    <div id="loader-wrapper">
        <div id="loader"></div>
        <div class="loader-section"></div>
    </div>
    <div class="wrapper">


 <div class="modal" tabindex="-1" role="dialog" id="alertaModal">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Sistema</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <p>Su tiempo de permanecia sin actividad se ha superado. Quiere continuar en el sistema?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary">Salir</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Continuar</button>
      </div>
    </div>
  </div>
</div>

        @(await Component.InvokeAsync<HeaderViewComponent>())
        @(await Component.InvokeAsync<SidebarViewComponent>())
        <div class="content-wrapper " id="contentWrapper" style="background-color: rgb(244, 246, 249); min-height: 545px;">
            <div class="content">
                <div class="container-fluid container-fluid-card" id="divContent" >
                    @(await Component.InvokeAsync<TitleViewComponent>())
                    @RenderBody()
                </div>
            </div>
        </div>
        @(await Component.InvokeAsync<FooterViewComponent>())
        @(await Component.InvokeAsync<LogoutViewComponent>())
        @(await Component.InvokeAsync<FormModalViewComponent>())
        @(await Component.InvokeAsync<ImageModalViewComponent>())
        @*<partial name="AdminLTE/_LogoutModal" />
            <partial name="AdminLTE/Modals/_FormModal" />
            <partial name="AdminLTE/_ImageModal" />*@
    </div>
    <partial name="_Scripts" />
    @await Component.InvokeAsync("Notyf")
    @RenderSection("Scripts", required: false)


   
    <script>

        //$.validator.methods.range = function (value, element, param) {
        //    var globalizedValue = value.replace(".", ",");
        //    return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
        //}

        //$.validator.methods.number = function (value, element) {
        //    return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\,.]\d{3})+)(?:[\,.]\d+)?$/.test(value);
        //}

        jQuery.extend(jQuery.validator.methods, {
            number: function (value, element) {
                return this.optional(element)
                    || /^-?(?:\d+|\d{1,3}(?:\.\d{3})+)(?:[,.]\d+)?$/.test(value);
            }
        });

//            // Vigila la actividad del sistema.
//    // --------------------------------
//function VigilaActividad() {

//    // Contador de tiempo en el que el usuario está inactivo.
//    // ------------------------------------------------------
//    var segundosDesdeUltimaActividad = 0;

//    // Recuperamos del Controlador el valor timeOut definido en sessionState del Web.config
//    // -----------------------------------------------------------------------------------
//    var timeOut = 1;

//    var maximaInactividad = timeOut * 60;

//    // A intervalos de 1 segundo (1000) revisa el estado del contador.
//    // ---------------------------------------------------------------
//    setInterval(function () {
//        segundosDesdeUltimaActividad++;

//        if (segundosDesdeUltimaActividad > maximaInactividad) {
//            alert("Necesitas mas Tiempo?");
//            location.href = '/';
//        }
//    }, 1000);

//    // Esta funcion inicializa el contador de inactividad, sucede cuando se detecta que el usuario está trabajando...
//    // -------------------------------------------------------------------------------------------------------------
//    function reseteaActividad() {
//        segundosDesdeUltimaActividad = 0;
//    }

//    // Vector con los eventos que vigila.
//    // ----------------------------------
//    var EventosActividad = [
//        'keydown', 'keypress', 'scroll', 'mousedown', 'mousemove', 'touchstart', 'resize'
//    ];

//    // Creamos "Escuchadores" de eventos al documento...
//    // -------------------------------------------------
//    EventosActividad.forEach(function (eventName) {
//        document.addEventListener(eventName, reseteaActividad, true);
//    });
//}


//localizar timers
    var iddleTimeoutWarning = null;
    var iddleTimeout = null;
 
    //esta funcion automaticamente sera llamada por ASP.NET AJAX cuando la pagina cargue y un postback parcial complete
    function pageLoad() { 
//$.notify.addStyle('foo', {
//  html: 
//    "<div>" +
//      "<div class='my-class'>" +
//        "<div class='titless' data-notify-html='title'/>" +
//        "<div class='buttons'>" +
//          "<button class='no'>Cancel</button>" +
//          "<button class='yes' data-notify-text='button'></button>" +
//        "</div>" +
//      "</div>" +
//    "</div>"
//});


        //borrar antiguos timers de postbacks anteriores
        if (iddleTimeoutWarning != null)
            clearTimeout(iddleTimeoutWarning);
        if (iddleTimeout != null)
            clearTimeout(iddleTimeout);
        //leer tiempos desde web.config
        var millisecTimeOutWarning = 1 * 1800 * 1000 ;
        var millisecTimeOut = 2 * 1800 * 1000 ; 
 
        //establece tiempo para mostrar advertencia si el usuario ha estado inactivo
        iddleTimeoutWarning = setTimeout("DisplayIddleWarning()", millisecTimeOutWarning);
        iddleTimeout = setTimeout("TimeoutPage()", millisecTimeOut);
    } 
 
    function DisplayIddleWarning() {
     $('#alertaModal').modal('show');
       // alert("Tu sesion esta a punto de expirar debido a inactividad.");
    } 
 
    function TimeoutPage() {
        //actualizar pagina para este ejemplo, podriamos redirigir a otra pagina con codigo para eliminar variables de sesion
      $('#alertaModal').modal('hide');
       // location.reload();
      
       location.href = '/identity/account/login';
    } 
    </script>
</body>
</html>